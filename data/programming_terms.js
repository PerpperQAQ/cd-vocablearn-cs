// 编程语言词汇数据
const programmingTerms = [
    // 编程基础
    {
        id: 1,
        term: "Variable",
        pronunciation: "/ˈvɛriəbəl/",
        definition: "A named storage location in memory that can hold different values during program execution.",
        translation: "变量",
        explanation: "在内存中的命名存储位置，在程序执行期间可以保存不同的值。",
        example: "Let x be a variable that stores the user's age.",
        exampleTranslation: "让x作为存储用户年龄的变量。",
        category: "基础概念",
        difficulty: "基础",
        tags: ["variable", "memory", "storage"]
    },
    {
        id: 2,
        term: "Function",
        pronunciation: "/ˈfʌŋkʃən/",
        definition: "A reusable block of code that performs a specific task and can be called multiple times.",
        translation: "函数",
        explanation: "执行特定任务的可重用代码块，可以被多次调用。",
        example: "The calculate() function computes the total price.",
        exampleTranslation: "calculate()函数计算总价格。",
        category: "基础概念",
        difficulty: "基础",
        tags: ["function", "reusable", "code"]
    },
    {
        id: 3,
        term: "Loop",
        pronunciation: "/luːp/",
        definition: "A programming construct that repeats a block of code until a condition is met.",
        translation: "循环",
        explanation: "重复执行代码块直到满足条件的编程结构。",
        example: "A for loop iterates through an array of elements.",
        exampleTranslation: "for循环遍历元素数组。",
        category: "控制结构",
        difficulty: "基础",
        tags: ["loop", "iteration", "repeat"]
    },
    {
        id: 4,
        term: "Array",
        pronunciation: "/əˈreɪ/",
        definition: "A collection of elements stored in contiguous memory locations, accessed by index.",
        translation: "数组",
        explanation: "存储在连续内存位置中的元素集合，通过索引访问。",
        example: "The array stores student names in alphabetical order.",
        exampleTranslation: "数组按字母顺序存储学生姓名。",
        category: "数据类型",
        difficulty: "基础",
        tags: ["array", "collection", "index"]
    },
    {
        id: 5,
        term: "Object",
        pronunciation: "/ˈɑːbdʒekt/",
        definition: "A data structure that contains properties and methods to represent real-world entities.",
        translation: "对象",
        explanation: "包含属性和方法以表示现实世界实体的数据结构。",
        example: "The user object contains name, email, and age properties.",
        exampleTranslation: "用户对象包含姓名、邮箱和年龄属性。",
        category: "面向对象",
        difficulty: "中等",
        tags: ["object", "properties", "methods"]
    },
    {
        id: 6,
        term: "Class",
        pronunciation: "/klæs/",
        definition: "A blueprint or template for creating objects with shared properties and methods.",
        translation: "类",
        explanation: "用于创建具有共享属性和方法的对象的蓝图或模板。",
        example: "The Car class defines properties like color and brand.",
        exampleTranslation: "Car类定义了颜色和品牌等属性。",
        category: "面向对象",
        difficulty: "中等",
        tags: ["class", "blueprint", "template"]
    },
    {
        id: 7,
        term: "Inheritance",
        pronunciation: "/ɪnˈherɪtəns/",
        definition: "A mechanism that allows a class to inherit properties and methods from another class.",
        translation: "继承",
        explanation: "允许一个类从另一个类继承属性和方法的机制。",
        example: "The SportsCar class inherits from the Car class.",
        exampleTranslation: "SportsCar类继承自Car类。",
        category: "面向对象",
        difficulty: "中等",
        tags: ["inheritance", "extends", "parent"]
    },
    {
        id: 8,
        term: "Polymorphism",
        pronunciation: "/ˌpɑːliˈmɔːrfɪzəm/",
        definition: "The ability of different classes to be treated as instances of the same type through inheritance.",
        translation: "多态性",
        explanation: "通过继承使不同类能够被视为同一类型实例的能力。",
        example: "Different shapes can all implement a draw() method.",
        exampleTranslation: "不同的图形都可以实现draw()方法。",
        category: "面向对象",
        difficulty: "高级",
        tags: ["polymorphism", "interface", "abstract"]
    },
    {
        id: 9,
        term: "Recursion",
        pronunciation: "/rɪˈkɜːrʒən/",
        definition: "A programming technique where a function calls itself to solve a problem.",
        translation: "递归",
        explanation: "函数调用自身来解决问题的编程技术。",
        example: "Factorial calculation uses recursion: n! = n * (n-1)!",
        exampleTranslation: "阶乘计算使用递归：n! = n * (n-1)!",
        category: "算法技术",
        difficulty: "中等",
        tags: ["recursion", "self-calling", "divide"]
    },
    {
        id: 10,
        term: "Exception",
        pronunciation: "/ɪkˈsepʃən/",
        definition: "An error or unexpected event that occurs during program execution.",
        translation: "异常",
        explanation: "程序执行期间发生的错误或意外事件。",
        example: "A NullPointerException occurs when accessing null objects.",
        exampleTranslation: "访问空对象时会发生NullPointerException。",
        category: "错误处理",
        difficulty: "中等",
        tags: ["exception", "error", "handling"]
    },
    {
        id: 11,
        term: "Debugging",
        pronunciation: "/diːˈbʌɡɪŋ/",
        definition: "The process of finding and fixing errors or bugs in computer programs.",
        translation: "调试",
        explanation: "查找和修复计算机程序中的错误或缺陷的过程。",
        example: "Debugging helps identify why the program crashes.",
        exampleTranslation: "调试有助于识别程序崩溃的原因。",
        category: "开发工具",
        difficulty: "基础",
        tags: ["debugging", "testing", "fixing"]
    },
    {
        id: 12,
        term: "Compiler",
        pronunciation: "/kəmˈpaɪlər/",
        definition: "A program that translates source code written in a high-level language into machine code.",
        translation: "编译器",
        explanation: "将高级语言编写的源代码翻译成机器代码的程序。",
        example: "The Java compiler converts .java files to .class files.",
        exampleTranslation: "Java编译器将.java文件转换为.class文件。",
        category: "开发工具",
        difficulty: "中等",
        tags: ["compiler", "translation", "machine-code"]
    },
    {
        id: 13,
        term: "Interpreter",
        pronunciation: "/ɪnˈtɜːrprətər/",
        definition: "A program that executes source code line by line without prior compilation.",
        translation: "解释器",
        explanation: "无需预先编译即逐行执行源代码的程序。",
        example: "Python uses an interpreter to execute code directly.",
        exampleTranslation: "Python使用解释器直接执行代码。",
        category: "开发工具",
        difficulty: "中等",
        tags: ["interpreter", "execution", "runtime"]
    },
    {
        id: 14,
        term: "API",
        pronunciation: "/ˌeɪ piː ˈaɪ/",
        definition: "Application Programming Interface - a set of protocols for building software applications.",
        translation: "应用程序编程接口",
        explanation: "用于构建软件应用程序的协议集合。",
        example: "The Twitter API allows developers to access tweet data.",
        exampleTranslation: "Twitter API允许开发者访问推文数据。",
        category: "接口设计",
        difficulty: "中等",
        tags: ["API", "interface", "protocol"]
    },
    {
        id: 15,
        term: "Framework",
        pronunciation: "/ˈfreɪmwɜːrk/",
        definition: "A pre-written code library that provides a foundation for developing applications.",
        translation: "框架",
        explanation: "为开发应用程序提供基础的预编写代码库。",
        example: "React is a popular JavaScript framework for web development.",
        exampleTranslation: "React是流行的JavaScript Web开发框架。",
        category: "开发工具",
        difficulty: "中等",
        tags: ["framework", "library", "foundation"]
    },
    {
        id: 16,
        term: "Library",
        pronunciation: "/ˈlaɪbreri/",
        definition: "A collection of pre-written code that developers can use to optimize tasks.",
        translation: "库",
        explanation: "开发者可以用来优化任务的预编写代码集合。",
        example: "The math library provides functions for complex calculations.",
        exampleTranslation: "数学库提供复杂计算的函数。",
        category: "开发工具",
        difficulty: "基础",
        tags: ["library", "code", "reusable"]
    },
    {
        id: 17,
        term: "Repository",
        pronunciation: "/rɪˈpɑːzətɔːri/",
        definition: "A storage location where code and project files are stored and managed.",
        translation: "代码仓库",
        explanation: "存储和管理代码及项目文件的存储位置。",
        example: "GitHub hosts millions of open-source repositories.",
        exampleTranslation: "GitHub托管数百万个开源代码仓库。",
        category: "版本控制",
        difficulty: "基础",
        tags: ["repository", "storage", "version-control"]
    },
    {
        id: 18,
        term: "Syntax",
        pronunciation: "/ˈsɪntæks/",
        definition: "The set of rules that defines valid constructs in a programming language.",
        translation: "语法",
        explanation: "定义编程语言中有效结构的规则集合。",
        example: "Python syntax requires proper indentation for code blocks.",
        exampleTranslation: "Python语法要求代码块有正确的缩进。",
        category: "语言特性",
        difficulty: "基础",
        tags: ["syntax", "rules", "language"]
    },
    {
        id: 19,
        term: "Algorithm",
        pronunciation: "/ˈælɡərɪðəm/",
        definition: "A step-by-step procedure for solving a computational problem.",
        translation: "算法",
        explanation: "解决计算问题的分步骤程序。",
        example: "The sorting algorithm arranges data in ascending order.",
        exampleTranslation: "排序算法将数据按升序排列。",
        category: "算法技术",
        difficulty: "中等",
        tags: ["algorithm", "procedure", "problem-solving"]
    },
    {
        id: 20,
        term: "Refactoring",
        pronunciation: "/riːˈfæktərɪŋ/",
        definition: "The process of restructuring existing code without changing its external behavior.",
        translation: "重构",
        explanation: "在不改变外部行为的情况下重构现有代码的过程。",
        example: "Code refactoring improves readability and maintainability.",
        exampleTranslation: "代码重构提高可读性和可维护性。",
        category: "软件工程",
        difficulty: "中等",
        tags: ["refactoring", "restructuring", "improvement"]
    }
];

// 导出数据
if (typeof module !== 'undefined' && module.exports) {
    module.exports = programmingTerms;
} else {
    window.programmingTerms = programmingTerms;
} 